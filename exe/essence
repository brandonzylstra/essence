#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/essence'

class EssenceCli
  COMMANDS = {
    'template' => 'Generate a new schema.yaml template with defaults and patterns',
    'compile' => 'Compile YAML schema to HCL format',
    'help' => 'Show help information',
    'version' => 'Show Essence version'
  }.freeze

  def initialize(args)
    @args = args
    @command = args.first
  end

  def run
    # Handle flags first
    if @command == '-h'
      show_help
      return
    elsif @command == '-v'
      show_version
      return
    end

    case @command
    when 'template', 't'
      generate_template
    when 'compile', 'c'
      compile_schema
    when 'version', 'v', '--version'
      show_version
    when 'help', '--help', nil
      show_help
    else
      puts "‚ùå Unknown command: #{@command}"
      puts "Run 'essence help' for available commands."
      exit 1
    end
  end

  private

  def generate_template
    file_path = @args[1] || 'db/schema.yaml'

    puts "üéØ Generating Essence schema template at #{file_path}..."

    begin
      Essence.generate_template(file_path)
    rescue => e
      puts "‚ùå Error generating template: #{e.message}"
      exit 1
    end
  end

  def compile_schema
    yaml_file = @args[1]
    hcl_file = @args[2]

    if yaml_file && !File.exist?(yaml_file)
      puts "‚ùå YAML file not found: #{yaml_file}"
      exit 1
    end

    puts "üîÑ Compiling schema to HCL format..."

    begin
      Essence.compile(yaml_file, hcl_file)
    rescue => e
      puts "‚ùå Error during compilation: #{e.message}"
      exit 1
    end
  end

  def show_version
    puts "Essence v#{Essence::VERSION}"
    puts "Essence - Database Schema Management"
  end

  def show_help
    puts <<~HELP
      Essence - Database Schema Management
      ====================================

      Rapid database schema iteration for Rails applications.

      USAGE:
        essence <command> [options]

      COMMANDS:
        template [file]       Generate a new schema.yaml template (alias: t)
        compile [yaml] [hcl]  Compile YAML schema to HCL format (alias: c)
        version               Show Essence version (alias: v)
        help                  Show this help message (alias: h)

      EXAMPLES:
        essence template                        # Generate db/schema.yaml template
        essence template custom/schema.yaml     # Generate template at custom path
        essence compile                         # Compile db/schema.yaml to db/schema.hcl
        essence compile input.yaml output.hcl   # Compile with custom file paths
        essence version                         # Show version information

      FEATURES:
        ‚úÖ Default columns (id, created_at, updated_at) for all tables
        ‚úÖ Smart pattern matching for column properties:
           ‚Ä¢ _id columns ‚Üí automatic foreign keys with references
           ‚Ä¢ _at columns ‚Üí datetime not_null constraints#{'  '}
           ‚Ä¢ Fallback to string type for unmatched columns
        ‚úÖ Automatic pluralization for foreign key references
        ‚úÖ Clean YAML syntax that's version-control friendly
        ‚úÖ Template generation for quick project setup
        ‚úÖ Seamless Rails integration via rake tasks

      RAILS INTEGRATION:
        In a Rails project, use rake tasks for full workflow:
      #{'  '}
        rake essence:template                # Generate schema template
        rake essence:compile                 # Compile YAML to HCL
        rake essence:preview                 # Preview schema changes
        rake essence:apply                   # Apply changes to database
        rake essence:deploy[name]            # Full workflow with migration

      For more information, visit: https://github.com/brandonzylstra/essence
    HELP
  end
end

# Run the CLI
if __FILE__ == $0
  cli = EssenceCli.new(ARGV)
  cli.run
end
