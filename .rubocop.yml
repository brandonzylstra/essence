# Omakase Ruby styling for Rails
inherit_gem: { rubocop-rails-omakase: rubocop.yml }

# Overwrite or add rules to create your own house style
#
# # Use `[a, [b, c]]` not `[ a, [ b, c ] ]`
# Layout/SpaceInsideArrayLiteralBrackets:
#   Enabled: false

# Disable standard method call indentation to prevent double-indentation anti-pattern
# Standard RuboCop styles create the problematic pattern we want to avoid
Layout/MultilineMethodCallIndentation:
  Enabled: false

# Ensure consistent indentation for all multiline operations
Layout/MultilineOperationIndentation:
  EnforcedStyle: indented

# Re-enable indentation width cop with proper configuration to catch structural errors
Layout/IndentationWidth:
  Width: 2

# Prevent incorrect indentation after access modifiers (private, protected, public)
# Methods after 'private' should be at same level as other methods, NOT indented
Layout/AccessModifierIndentation:
  EnforcedStyle: outdent

# Add cops to catch structural indentation errors
Layout/IndentationConsistency:
  Enabled: true
  EnforcedStyle: normal

Layout/EndAlignment:
  Enabled: true
  EnforcedStyleAlignWith: variable

Layout/DefEndAlignment:
  Enabled: true
  EnforcedStyleAlignWith: start_of_line

# Handle HEREDOC indentation properly
Layout/HeredocIndentation:
  Enabled: true

# Ensure proper HEREDOC argument placement
Layout/HeredocArgumentClosingParenthesis:
  Enabled: true

# Handle method calls on HEREDOCs correctly
Lint/HeredocMethodCallPosition:
  Enabled: true

# SCOPE-BASED INDENTATION STANDARD:
#
# Method chaining should align with the scope level, NOT add extra indentation.
#
# ✅ CORRECT (scope-based indentation):
#   cleaned_words = name.to_s
#   .gsub(/pattern/, "")     # Aligned with scope level
#   .split(/delim/)          # Same indentation as the line above
#   .map(&:capitalize)
#
# ❌ WRONG (double indentation anti-pattern):
#   cleaned_words = name.to_s
#       .gsub(/pattern/, "")  # Extra indentation - creates visual noise
#       .split(/delim/)       # Hard to read, not scope-based
#       .map(&:capitalize)
#
# This standard applies to all method chaining, regardless of context.
# Each method call should be indented at the same level as the scope it belongs to.

# RUBOCOP CONFIGURATION OVERVIEW:
#
# This configuration extends RuboCop Rails Omakase with custom indentation rules
# that enforce a 2-space, scope-based indentation standard throughout the project.
#
# KEY CONFIGURATION DECISIONS:
#
# DISABLED COPS:
# - Layout/MultilineMethodCallIndentation: All built-in styles create problematic
#   double-indentation patterns. Disabled to allow scope-based indentation rules
#   even in cases of long method chains spread across multiple lines.
#
# STRUCTURAL INDENTATION COPS:
# - Layout/IndentationWidth: Enforces consistent 2-space indentation
# - Layout/IndentationConsistency: Prevents mixed indentation patterns
# - Layout/EndAlignment: Ensures end statements align with their opening statements
# - Layout/DefEndAlignment: Ensures method endings align with method definitions
#
# HEREDOC HANDLING:
# - Layout/HeredocIndentation: Ensures proper HEREDOC indentation structure
# - Layout/HeredocArgumentClosingParenthesis: Handles HEREDOC argument placement
# - Lint/HeredocMethodCallPosition: Catches HEREDOC method call positioning errors
#
# ACCESS MODIFIER CONFIGURATION:
# - Layout/AccessModifierIndentation: Uses 'outdent' style so methods after
#   'private', 'protected', or 'public' align with other class methods
#
# MULTILINE OPERATION STYLE:
# - Layout/MultilineOperationIndentation: Uses 'indented' style for consistent
#   handling of multiline operations like array literals and hash definitions
#
# ACCESS MODIFIER STYLE:
# - Style/AccessModifierDeclarations: Enforces inline style for private/protected
#   modifiers (e.g., 'private def method_name' instead of separate 'private' line)
Style/AccessModifierDeclarations:
  EnforcedStyle: inline

# This configuration maintains compatibility with RuboCop Rails Omakase while
# enforcing the project's scope-based indentation standard. For complete
# indentation guidelines and examples, see docs/indentation_standard.md.

# RSpec Configuration for Integration Tests
# Allow longer examples and multiple expectations for comprehensive integration tests
RSpec/ExampleLength:
  Max: 50
  Exclude:
    - 'spec/integration/**/*'
    - 'spec/**/comprehensive_*_spec.rb'
    - 'spec/**/hcl_formatting_spec.rb'
    - 'spec/**/pattern_verification_spec.rb'

RSpec/MultipleExpectations:
  Max: 10
  Exclude:
    - 'spec/integration/**/*'
    - 'spec/**/comprehensive_*_spec.rb'
    - 'spec/**/pattern_verification_spec.rb'
    - 'spec/**/compiler_spec.rb'

# Allow string descriptions for integration test suites
RSpec/DescribeClass:
  Exclude:
    - 'spec/integration/**/*'
    - 'spec/**/comprehensive_*_spec.rb'
    - 'spec/**/hcl_formatting_spec.rb'
    - 'spec/**/pattern_verification_spec.rb'

# Enable new cops by default
AllCops:
  NewCops: enable

# Configure new RSpec cops
RSpec/IncludeExamples:
  Enabled: true

# Disable overly strict RSpec cops for gem testing
RSpec/MessageSpies:
  Enabled: false

RSpec/StubbedMock:
  Enabled: false

RSpec/MessageChain:
  Enabled: false

RSpec/InstanceVariable:
  Enabled: false

RSpec/SpecFilePathFormat:
  Enabled: false

RSpec/ContextWording:
  Enabled: false

RSpec/HookArgument:
  Enabled: false

RSpec/BeNil:
  Enabled: false

RSpec/DescribedClass:
  Enabled: false
